// Generated by CoffeeScript 1.3.3
(function() {
  var GameModes, ObservableModel, PlayerEvents, namespace,
    __slice = [].slice;

  namespace = function(target, name, block) {
    var item, top, _i, _len, _ref, _ref1;
    if (arguments.length < 3) {
      _ref = [(typeof exports !== 'undefined' ? exports : window)].concat(__slice.call(arguments)), target = _ref[0], name = _ref[1], block = _ref[2];
    }
    top = target;
    _ref1 = name.split('.');
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      item = _ref1[_i];
      target = target[item] || (target[item] = {});
    }
    return block(target, top);
  };

  ObservableModel = (function() {

    function ObservableModel() {
      this.observers = [];
      this;

    }

    ObservableModel.prototype.addObserver = function(observer) {
      this.observers.push(observer);
      return this;
    };

    /*  
     # Notify observers of a model event.
     #   The Event is an object with fields:
     #     eventType | eventData
     # @param eventType : a string indicating the event type
     # @param data an object with event data. Each event type will have its own data structure.
    */


    ObservableModel.prototype.notifyObservers = function(eventType, eventData) {
      var observer, _i, _len, _ref, _results;
      _ref = this.observers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        observer = _ref[_i];
        _results.push(observer.handleEvent({
          type: eventType,
          data: eventData
        }));
      }
      return _results;
    };

    return ObservableModel;

  })();

  namespace("FNT", function(exports) {
    return exports.ObservableModel = ObservableModel;
  });

  /*
  (function() {
       FNT.ObservableModel = function() {
          this.observers = [];
          return this;
      };
  
      FNT.ObservableModel.prototype = {
          observers:      null,
  
          notifyObservers : function( eventType, eventData ) {
              for (var i = 0; i < this.observers.length; i++) {
                  this.observers[i].handleEvent( {
                      type:  eventType,
                      data: eventData,
                  });
              }
          },
  
          addObserver : function( observer ) {
              this.observers.push(observer);
              return this;
          },
      };
  })();
  */


  GameModes = {
    quest: {
      name: "quest",
      levelData: [
        {
          spawnLocation: {
            x: 512,
            y: 800
          },
          ringData: [
            {
              x: 512,
              y: 512,
              diameter: 900
            }, {
              x: 100,
              y: 400,
              diameter: 190
            }, {
              x: 300,
              y: 600,
              diameter: 200
            }, {
              x: 512,
              y: 512,
              diameter: 100
            }, {
              x: 750,
              y: 800,
              diameter: 420
            }, {
              x: 850,
              y: 800,
              diameter: 200
            }
          ]
        }, {
          spawnLocation: {
            x: 512,
            y: 800
          },
          ringData: [
            {
              x: 512,
              y: 512,
              diameter: 1000
            }, {
              x: 100,
              y: 100,
              diameter: 100
            }
          ]
        }
      ]
    },
    race: {
      name: 'race'
    },
    pwn: {
      name: 'pwn'
    }
  };

  namespace("FNT", function(exports) {
    return exports.GameModes = GameModes;
  });

  PlayerEvents = {
    SPAWN: "player_event_spawn"
  };

  namespace("FNT", function(exports) {
    return exports.PlayerEvents = PlayerEvents;
  });

  /*
  class Player
    
    
  class Animal
    constructor: (@name) ->
  
    move: (meters) ->
      alert @name + " moved #{meters}m."
  
  class Snake extends Animal
    move: ->
      alert "Slithering..."
      super 5
  
  class Horse extends Animal
    move: ->
      alert "Galloping..."
      super 45
  
  
  
  # PLAYER MODEL
  (function() {
  
      FNT.Player = function() {
          FNT.Player.superclass.constructor.call(this);
          
          return this;
      };
  
      FNT.Player.prototype = {
          diameter:        25,
          position:        null,
          color:           "#F00",
          
          create : function() {
              this.position = new CAAT.Point(0, 0);
              
              return this;
          },
  
          spawn : function(spawnLocation) {
              this.position.x = spawnLocation.x;
              this.position.y = spawnLocation.y;
              
              this.notifyObservers(FNT.PlayerEvents.SPAWN, this);
          },
      };
  
      extend( FNT.Player, FNT.ObservableModel);
  })();
  */


}).call(this);
