// Generated by CoffeeScript 1.3.3
(function() {
  var BackgroundContainer, CircleActor, GameModel, GameModelEvents, GameModes, GameSceneActor, LevelContainer, LevelEvents, LevelModel, ObservableModel, PlayerActor, PlayerEvents, PlayerModel, RingActor, RingModel, namespace,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  namespace = function(target, name, block) {
    var item, top, _i, _len, _ref, _ref1;
    if (arguments.length < 3) {
      _ref = [(typeof exports !== 'undefined' ? exports : window)].concat(__slice.call(arguments)), target = _ref[0], name = _ref[1], block = _ref[2];
    }
    top = target;
    _ref1 = name.split('.');
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      item = _ref1[_i];
      target = target[item] || (target[item] = {});
    }
    return block(target, top);
  };

  ObservableModel = (function() {

    function ObservableModel() {
      this.observers = [];
      this;

    }

    ObservableModel.prototype.addObserver = function(observer) {
      this.observers.push(observer);
      return this;
    };

    /*  
     # Notify observers of a model event.
     #   The Event is an object with fields:
     #     eventType | eventData
     # @param eventType : a string indicating the event type
     # @param data an object with event data. Each event type will have its own data structure.
    */


    ObservableModel.prototype.notifyObservers = function(eventType, eventData) {
      var observer, _i, _len, _ref, _results;
      _ref = this.observers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        observer = _ref[_i];
        _results.push(observer.handleEvent({
          type: eventType,
          data: eventData
        }));
      }
      return _results;
    };

    return ObservableModel;

  })();

  namespace("FNT", function(exports) {
    return exports.ObservableModel = ObservableModel;
  });

  GameModes = {
    quest: {
      name: "quest",
      levelData: [
        {
          spawnLocation: {
            x: 512,
            y: 800
          },
          ringData: [
            {
              x: 512,
              y: 512,
              diameter: 900
            }, {
              x: 100,
              y: 400,
              diameter: 190
            }, {
              x: 300,
              y: 600,
              diameter: 200
            }, {
              x: 512,
              y: 512,
              diameter: 100
            }, {
              x: 750,
              y: 800,
              diameter: 420
            }, {
              x: 850,
              y: 800,
              diameter: 200
            }
          ]
        }, {
          spawnLocation: {
            x: 512,
            y: 800
          },
          ringData: [
            {
              x: 512,
              y: 512,
              diameter: 1000
            }, {
              x: 100,
              y: 100,
              diameter: 100
            }
          ]
        }
      ]
    },
    race: {
      name: 'race'
    },
    pwn: {
      name: 'pwn'
    }
  };

  namespace("FNT", function(exports) {
    return exports.GameModes = GameModes;
  });

  PlayerEvents = {
    SPAWN: "player_event_spawn"
  };

  PlayerModel = (function(_super) {

    __extends(PlayerModel, _super);

    function PlayerModel() {
      PlayerModel.__super__.constructor.call(this);
      this;

    }

    PlayerModel.prototype.diameter = 25;

    PlayerModel.prototype.color = "#F00";

    PlayerModel.prototype.create = function() {
      this.position = new CAAT.Point(0, 0);
      return this;
    };

    PlayerModel.prototype.spawn = function(spawnLocation) {
      this.position.x = spawnLocation.x;
      this.position.y = spawnLocation.y;
      return this.notifyObservers(FNT.PlayerEvents.SPAWN, this);
    };

    return PlayerModel;

  })(FNT.ObservableModel);

  namespace("FNT", function(exports) {
    exports.PlayerEvents = PlayerEvents;
    return exports.PlayerModel = PlayerModel;
  });

  RingModel = (function() {

    function RingModel() {
      this.position = new CAAT.Point(0, 0);
      this;

    }

    RingModel.prototype.diameter = 0;

    RingModel.prototype.create = function(ringData) {
      this.position = new CAAT.Point(ringData.x, ringData.y);
      this.diameter = ringData.diameter;
      return this;
    };

    return RingModel;

  })();

  namespace("FNT", function(exports) {
    return exports.RingModel = RingModel;
  });

  LevelEvents = {
    LOAD: "level_event_load"
  };

  LevelModel = (function(_super) {

    __extends(LevelModel, _super);

    function LevelModel() {
      LevelModel.__super__.constructor.call(this);
      this.rings = [];
      this;

    }

    LevelModel.prototype.create = function() {
      return this;
    };

    LevelModel.prototype.load = function(ringData) {
      var ring, _i, _len;
      for (_i = 0, _len = ringData.length; _i < _len; _i++) {
        ring = ringData[_i];
        this.rings.push(new FNT.RingModel().create(ring));
      }
      return this.notifyObservers(FNT.LevelEvents.LOAD, this);
    };

    LevelModel.prototype.getRings = function() {
      return this.rings;
    };

    return LevelModel;

  })(ObservableModel);

  namespace("FNT", function(exports) {
    exports.LevelEvents = LevelEvents;
    return exports.LevelModel = LevelModel;
  });

  GameModelEvents = {
    UPDATE_STATUS: "update_status_event",
    CREATE_LEVEL: "create_level_event",
    ADDED_PLAYER: "added_player_event"
  };

  GameModel = (function(_super) {

    __extends(GameModel, _super);

    function GameModel() {
      GameModel.__super__.constructor.call(this);
      this;

    }

    GameModel.prototype.create = function() {
      this.createLevel();
      this.createPlayer();
      return this;
    };

    GameModel.prototype.createPlayer = function() {
      this.player = new FNT.PlayerModel().create();
      return this.notifyObservers(FNT.GameModelEvents.ADDED_PLAYER, this.player);
    };

    GameModel.prototype.createLevel = function() {
      this.level = new FNT.LevelModel().create();
      return this.notifyObservers(FNT.GameModelEvents.CREATE_LEVEL, this.level);
    };

    GameModel.prototype.startGame = function(gameMode) {
      this.gameMode = gameMode;
      return this.loadLevel(0);
    };

    GameModel.prototype.loadLevel = function(levelIndex) {
      this.currentLevelData = FNT.GameModes.quest.levelData[levelIndex];
      this.level.load(this.currentLevelData.ringData);
      return this.onLevelLoaded();
    };

    GameModel.prototype.onLevelLoaded = function() {
      return this.player.spawn(this.currentLevelData.spawnLocation);
    };

    return GameModel;

  })(ObservableModel);

  namespace("FNT", function(exports) {
    exports.GameModelEvents = GameModelEvents;
    return exports.GameModel = GameModel;
  });

  /*
   # Base class for circle-shaped Actors
  */


  CircleActor = (function(_super) {

    __extends(CircleActor, _super);

    function CircleActor() {
      CircleActor.__super__.constructor.call(this);
      this;

    }

    CircleActor.prototype.setPosition = function(point) {
      return this.centerAt(point.x, point.y);
    };

    CircleActor.prototype.setDiameter = function(diameter) {
      return this.setSize(diameter, diameter);
    };

    return CircleActor;

  })(CAAT.ShapeActor);

  namespace("FNT", function(exports) {
    return exports.CircleActor = CircleActor;
  });

  /*
   # Player Actor
  */


  PlayerActor = (function(_super) {

    __extends(PlayerActor, _super);

    function PlayerActor() {
      PlayerActor.__super__.constructor.call(this);
      this;

    }

    PlayerActor.prototype.create = function(scene, playerModel) {
      this.setVisible(false);
      this.setDiameter(playerModel.diameter);
      this.setPosition(playerModel.position);
      this.setStrokeStyle('#0');
      this.setFillStyle(playerModel.color);
      this.playerModel = playerModel;
      this.prepareSpawnBehavior();
      playerModel.addObserver(this);
      scene.addChild(this);
      return this;
    };

    PlayerActor.prototype.prepareSpawnBehavior = function() {
      this.spawnScaleBehavior = new CAAT.ScaleBehavior().setPingPong().setValues(1, 1.3, 1, 1.3, .50, .50).setDelayTime(0, 1000);
      return this.spawnAlphaBehavior = new CAAT.AlphaBehavior().setValues(0, 1).setDelayTime(0, 1000);
    };

    PlayerActor.prototype.handleEvent = function(event) {
      if (event.type === FNT.PlayerEvents.SPAWN) {
        return this.spawn();
      }
    };

    PlayerActor.prototype.spawn = function() {
      this.setPosition(this.playerModel.position);
      this.addBehavior(this.spawnScaleBehavior);
      this.addBehavior(this.spawnAlphaBehavior);
      return this.setVisible(true);
    };

    return PlayerActor;

  })(FNT.CircleActor);

  namespace("FNT", function(exports) {
    return exports.PlayerActor = PlayerActor;
  });

  RingActor = (function(_super) {

    __extends(RingActor, _super);

    function RingActor() {
      RingActor.__super__.constructor.call(this);
      this;

    }

    RingActor.prototype.create = function(ring) {
      this.setDiameter(ring.diameter);
      this.setPosition(ring.position);
      this.setStrokeStyle('#0');
      this.setFillStyle('#AAA');
      this.setAlpha(0.5);
      this.ring = ring;
      return this;
    };

    return RingActor;

  })(FNT.CircleActor);

  namespace("FNT", function(exports) {
    return exports.RingActor = RingActor;
  });

  LevelContainer = (function(_super) {

    __extends(LevelContainer, _super);

    function LevelContainer() {
      LevelContainer.__super__.constructor.call(this);
      this.ringActors = [];
      this;

    }

    LevelContainer.prototype.create = function(scene, levelModel) {
      this.scene = scene;
      this.levelModel = levelModel;
      this.levelModel.addObserver(this);
      this.scene.addChild(this);
      return this;
    };

    LevelContainer.prototype.handleEvent = function(event) {
      if (event.type === FNT.LevelEvents.LOAD) {
        return this.loadLevel();
      }
    };

    LevelContainer.prototype.loadLevel = function() {
      var ringActor, ringModel, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.levelModel.getRings();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ringModel = _ref[_i];
        this._create(ringModel);
      }
      _ref1 = this.ringActors;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        ringActor = _ref1[_j];
        _results.push(this._animate(ringActor));
      }
      return _results;
    };

    LevelContainer.prototype._create = function(ringModel) {
      var ringActor;
      ringActor = new FNT.RingActor().create(ringModel);
      ringActor.setVisible(false);
      this.ringActors.push(ringActor);
      return this.addChild(ringActor);
    };

    LevelContainer.prototype._animate = function(ringActor) {
      this._animateInUsingScale(ringActor, this.scene.time + Math.random() * 500, 1500, 0.1, 1);
      return ringActor.setVisible(true);
    };

    /*
       # Adds a CAAT.ScaleBehavior to the entity, used on animate in
    */


    LevelContainer.prototype._animateInUsingScale = function(actor, startTime, endTime, startScale, endScale) {
      var scaleBehavior;
      scaleBehavior = new CAAT.ScaleBehavior();
      scaleBehavior.anchor = CAAT.Actor.prototype.ANCHOR_CENTER;
      actor.scaleX = actor.scaleY = scaleBehavior.startScaleX = scaleBehavior.startScaleY = startScale;
      scaleBehavior.endScaleX = scaleBehavior.endScaleY = endScale;
      scaleBehavior.setFrameTime(startTime, startTime + endTime);
      scaleBehavior.setCycle(false);
      scaleBehavior.setInterpolator(new CAAT.Interpolator().createBounceOutInterpolator(false));
      return actor.addBehavior(scaleBehavior);
    };

    return LevelContainer;

  })(CAAT.ActorContainer);

  namespace("FNT", function(exports) {
    return exports.LevelContainer = LevelContainer;
  });

  BackgroundContainer = (function(_super) {

    __extends(BackgroundContainer, _super);

    function BackgroundContainer() {
      BackgroundContainer.__super__.constructor.call(this);
      this;

    }

    BackgroundContainer.prototype.create = function(scene, width, height) {
      this.setBounds(0, 0, width, height);
      this.setFillStyle("#555");
      scene.addChild(this);
      return this;
    };

    return BackgroundContainer;

  })(CAAT.ActorContainer);

  namespace("FNT", function(exports) {
    return exports.BackgroundContainer = BackgroundContainer;
  });

  /*
   # Game Scene Actor:
   #  Main entry point for all the Actors that constitute the scene.
   #  Responsible for creating the scene with the Director.
  */


  GameSceneActor = (function() {

    function GameSceneActor() {
      this;

    }

    /*
       # Creates the main game Scene.
       # @param director a CAAT.Director instance.
    */


    GameSceneActor.prototype.create = function(director) {
      var _this = this;
      this.director = director;
      this.gameModel = new FNT.GameModel().addObserver(this);
      this.directorScene = director.createScene();
      this.directorScene.activated = function() {
        return _this.gameModel.startGame(FNT.GameModes.quest);
      };
      this.backgroundContainer = new FNT.BackgroundContainer().create(this.directorScene, director.width, director.height);
      this.gameModel.create();
      return this;
    };

    GameSceneActor.prototype.createLevel = function(levelModel) {
      return this.levelContainer = new FNT.LevelContainer().create(this.directorScene, levelModel).setSize(this.director.width, this.director.height).setLocation(0, 0);
    };

    GameSceneActor.prototype.createPlayer = function(player) {
      return this.playerActor = new FNT.PlayerActor().create(this.directorScene, player);
    };

    GameSceneActor.prototype.handleEvent = function(event) {
      switch (event.type) {
        case FNT.GameModelEvents.ADDED_PLAYER:
          return this.createPlayer(event.data);
        case FNT.GameModelEvents.CREATE_LEVEL:
          return this.createLevel(event.data);
        default:
          return console.log("UNKNOWN EVENT TYPE! " + event.type);
      }
    };

    return GameSceneActor;

  })();

  namespace("FNT", function(exports) {
    return exports.GameSceneActor = GameSceneActor;
  });

}).call(this);
